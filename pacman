import arcade
import os

WIDTH = 560
HEIGHT = 620

sprite_scale = 0.5
MOVEMENT_SPEED = 5

mapWidth = 28 * 20
mapHeight = 32 * 20
map = [
    "%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
    "%............%%............%",
    "%.%%%%.%%%%%.%%.%%%%%.%%%%.%",
    "%o%%%%.%%%%%.%%.%%%%%.%%%%o%",
    "%.%%%%.%%%%%.%%.%%%%%.%%%%.%",
    "%..........................%",
    "%.%%%%.%%.%%%%%%%%.%%.%%%%.%",
    "%.%%%%.%%.%%%%%%%%.%%.%%%%.%",
    "%......%%....%%....%%......%",
    "%%%%%%.%%%%%-%%-%%%%%.%%%%%%",
    "-----%.%%%%%-%%-%%%%%.%-----",
    "-----%.%%----------%%.%-----",
    "-----%.%%-%%%==%%%-%%.%-----",
    "%%%%%%.%%-%G----G%-%%.%%%%%%",
    "------.---%------%---.------",
    "%%%%%%.%%-%G----G%-%%.%%%%%%",
    "-----%.%%-%%%%%%%%-%%.%-----",
    "-----%.%%----------%%.%-----",
    "-----%.%%-%%%%%%%%-%%.%-----",
    "%%%%%%.%%-%%%%%%%%-%%.%%%%%%",
    "%............%%............%",
    "%.%%%%.%%%%%.%%.%%%%%.%%%%.%",
    "%.%%%%.%%%%%.%%.%%%%%.%%%%.%",
    "%o..%%.......--.......%%..o%",
    "%%%.%%.%%.%%%%%%%%.%%.%%.%%%",
    "%%%.%%.%%.%%%%%%%%.%%.%%.%%%",
    "%......%%....%%....%%......%",
    "%.%%%%%%%%%%.%%.%%%%%%%%%%.%",
    "%.%%%%%%%%%%.%%.%%%%%%%%%%.%",
    "%..........................%",
    "%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
]
class Player(arcade.Window):

    def __init__(self, width, height, title):

        super().__init__(WIDTH, HEIGHT, "Pacman")
        player = arcade.Sprite("images/pacman.png", mirrored = True, scale = sprite_scale)
        # Sprite lists
        self.player_list = None

        # Set up the player
        self.score = 0
        self.player = None

    def update(self, delta_time):
        self.physics_engine.update()
        # Generate a list of all coin sprites that collided with the player.
        """coins_hit_list = arcade.check_for_collision_with_list(self.player_sprite, self.coin_list)
        if self.change_x < 0:
           self.set_texture(tex_left)
        elif self.change_x > 0:
            self.set_texture(tex_right)
        elif self.change_y < 0:
            self.set_texture(tex_down)
        elif self.change_y > 0:
            self.set_texture(tex_up)

        # Loop through each colliding sprite, remove it, and add to the score.
        for coin in coins_hit_list:
            coin.kill()
            self.score += 1
        self.physics_engine.update()
    """

def on_draw():
    arcade.start_render()
    global mapHeight

    Player.self.player_list.draw()

    y = mapHeight

    for row in map:
        x = 0
        for element in row:

            if element == "%":
                arcade.draw_lrtb_rectangle_filled(x, x + 20, y - 20, y - 40, arcade.color.BLUE)

            elif element == ".":
                arcade.draw_circle_filled(x + 10, y - 30, 3, arcade.color.WHITE)

            elif element == "o":
                arcade.draw_circle_filled(x + 10, y - 30, 7, arcade.color.WHITE)

            elif element == "=":
                arcade.draw_lrtb_rectangle_filled(x, x + 20, y - 25, y - 35, arcade.color.WHITE)

            x += 20
        y -= 20


def on_key_press(self, key, modifiers):
    """Called whenever a key is pressed. """

    if key == arcade.key.UP:
        self.player_sprite.change_y = MOVEMENT_SPEED
    elif key == arcade.key.DOWN:
        self.player_sprite.change_y = -MOVEMENT_SPEED
    elif key == arcade.key.LEFT:
        self.player_sprite.change_x = -MOVEMENT_SPEED
    elif key == arcade.key.RIGHT:
        self.player_sprite.change_x = MOVEMENT_SPEED

def on_key_release(key, modifiers):
    pass


def on_mouse_press(x, y, button, modifiers):
    pass


def setup(self):
    self.player_list = arcade.SpriteList()
    self.coin_list = arcade.SpriteList()

    self.score = 0

    # Set up the player
    self.player_sprite = arcade.Sprite("images/pacman.png", sprite_scale)
    self.player_sprite.center_x = 50  # Starting position
    self.player_sprite.center_y = 50
    self.player_list.append(self.player_sprite)

    arcade.open_window(WIDTH, HEIGHT, "Pacman")
    arcade.set_background_color(arcade.color.BLACK)

    arcade.schedule(Player.update, 1 / 60)

    # Override arcade window methods
    window = arcade.get_window()
    window.on_draw = on_draw
    window.on_key_press = on_key_press
    window.on_key_release = on_key_release

    arcade.run()

def main():
    setup()
    arcade.run()

if __name__ == '__main__':
    main()
