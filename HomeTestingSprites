import arcade
import os

WIDTH = 560
HEIGHT = 620
TITLE = "Pacman"
MOVEMENT_SPEED = 10
MAP_WIDTH = 28 * 20
MAP_HEIGHT = 32 * 20

map = [
    "%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
    "%............%%............%",
    "%.%%%%.%%%%%.%%.%%%%%.%%%%.%",
    "%.%%%%.%%%%%.%%.%%%%%.%%%%.%",
    "%.%%%%.%%%%%.%%.%%%%%.%%%%.%",
    "%..........................%",
    "%.%%%%.%%.%%%%%%%%.%%.%%%%.%",
    "%.%%%%.%%.%%%%%%%%.%%.%%%%.%",
    "%......%%....%%....%%......%",
    "%%%%%%.%%%%%-%%-%%%%%.%%%%%%",
    "-----%.%%%%%-%%-%%%%%.%-----",
    "-----%.%%----------%%.%-----",
    "-----%.%%-%%%==%%%-%%.%-----",
    "%%%%%%.%%-%G----G%-%%.%%%%%%",
    "------.---%------%---.------",
    "%%%%%%.%%-%G----G%-%%.%%%%%%",
    "-----%.%%-%%%%%%%%-%%.%-----",
    "-----%.%%----------%%.%-----",
    "-----%.%%-%%%%%%%%-%%.%-----",
    "%%%%%%.%%-%%%%%%%%-%%.%%%%%%",
    "%............%%............%",
    "%.%%%%.%%%%%.%%.%%%%%.%%%%.%",
    "%.%%%%.%%%%%.%%.%%%%%.%%%%.%",
    "%...%%.......--.......%%...%",
    "%%%.%%.%%.%%%%%%%%.%%.%%.%%%",
    "%%%.%%.%%.%%%%%%%%.%%.%%.%%%",
    "%......%%....%%....%%......%",
    "%.%%%%%%%%%%.%%.%%%%%%%%%%.%",
    "%.%%%%%%%%%%.%%.%%%%%%%%%%.%",
    "%..........................%",
    "%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
]

class Ghost(arcade.Sprite):
    def __init__(self):
        super().__init__()

        file_path = os.path.dirname(os.path.abspath(__file__))
        os.chdir(file_path)

        self.ghost = arcade.Sprite()

        self.setup()
        self.on_draw()

    def setup(self):
        character_scale = 1
        self.player.stand_right_textures.append(arcade.load_texture("images/ghost.png", scale=character_scale))

    def on_draw(self):
        pass

    def next_step(self):
        # choose next move until hit wall
        pass

class Map():

    def __init__(self):
        super().__init__()

        file_path = os.path.dirname(os.path.abspath(__file__))
        os.chdir(file_path)

        self.brick_list = arcade.SpriteList()
        self.food_list = arcade.SpriteList()

        self.setup()

    def draw_map(self):
        global MAP_HEIGHT, map
        arcade.start_render()

        y = MAP_HEIGHT

        for row in map:
            x = 0
            for element in row:
                if element == "." or element == "-" or element == "G":
                    arcade.draw_lrtb_rectangle_filled(x, x + 20, y - 15, y - 35, arcade.color.BLACK)
                elif element == "=":
                    arcade.draw_lrtb_rectangle_filled(x, x + 20, y - 15, y - 35, arcade.color.WHITE)
                x += 20
            y -= 20

    def setup(self):
        global MAP_HEIGHT, map

        y = MAP_HEIGHT
        y = MAP_HEIGHT

        for row in map:
            x = 0
            for element in row:
                if element == "%":
                    brick = arcade.Sprite("images/blue.png", center_x=x + 10, center_y=y - 25, scale=0.01)
                    self.brick_list.append(brick)

                elif element == ".":
                    food = arcade.Sprite("images/food.png", center_x=x + 10, center_y=y - 25, scale=0.03)
                    self.food_list.append(food)

                x += 20
            y -= 20
        arcade.schedule(self.update, 1 / 60)

    def update(self):
        self.brick_list.update()
        self.food_list.update()

class Player(arcade.Sprite):

    def __init__(self):
        super().__init__()
        self.setup()
        self.draw()

    def setup(self):
        # self.player = arcade.Sprite("images/pacman.png", center_x=280, center_y=155, scale=0.008)
        self.score = 0
        self.append_texture("images/pacman.png")
        self.center_x = 280
        self.center_y = 155
        self.scale = 0.008

    #def draw(self):
        #self.player.draw()

    def move(self, direction, movement):

        if movement == MOVEMENT_SPEED:
            if direction == "y":
                self.player.change_y = MOVEMENT_SPEED
            else:
                self.player.change_x = MOVEMENT_SPEED

        elif movement == -MOVEMENT_SPEED:
            if direction == "y":
                self.player.change_y = -MOVEMENT_SPEED
            else:
                self.player.change_x = -MOVEMENT_SPEED

class MyGame(arcade.Window):

    def __init__(self, WIDTH, HEIGHT, TITLE):
        super().__init__(WIDTH, HEIGHT, TITLE)
        self.player = Player()
        self.map = Map()
        self.setup()

    def setup(self):
        arcade.set_background_color(arcade.color.BLUE)
        #self.player.setup()
        #self.map.setup()

    def update(self, delta_time):
        self.map.food_list.update()
        self.map.brick_list.update()
        self.player.update()

        hit_list = arcade.check_for_collision_with_list(self.player, self.map.food_list)

        for food in hit_list:
            food.kill()
            self.player.score += 1

    def on_draw(self):
        self.player.draw()
        self.map.draw_map()
        self.map.food_list.draw()
        self.map.brick_list.draw()

    def on_key_press(self, key, modifiers):
        if key == arcade.key.UP:
            self.player.move(self, "y", MOVEMENT_SPEED)
        elif key == arcade.key.DOWN:
            self.player.move(self, "y", -MOVEMENT_SPEED)
        elif key == arcade.key.LEFT:
            self.player.move(self, "x", -MOVEMENT_SPEED)
        elif key == arcade.key.RIGHT:
            self.player.move(self, "x", MOVEMENT_SPEED)
        elif key == arcade.key.ENTER:
            pass

def main():
    window = MyGame(WIDTH, HEIGHT, TITLE)
    window.setup()
    arcade.run()

if __name__ == '__main__':
    #MyGame.setup()
    main()
