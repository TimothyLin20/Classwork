import arcade
import os

WIDTH = 560
HEIGHT = 620
TITLE = "Pacman"

MOVEMENT_SPEED = 10

mapWidth = 28 * 20
mapHeight = 32 * 20

class Ghost(arcade.Window):
    def __init__(self):
        super().__init__()
    #dir
        file_path = os.path.dirname(os.path.abspath(__file__))
        os.chdir(file_path)

        self.ghost = arcade.Sprite()

        self.setup()
        self.draw()

    def setup(self):
        character_scale = 1
        self.player.stand_right_textures.append(arcade.load_texture("images/ghost.png", scale = character_scale))

    def draw(self):
        pass

    def next_step(self):
        pass

class Map(arcade.Window):
    map = [
        "%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
        "%............%%............%",
        "%.%%%%.%%%%%.%%.%%%%%.%%%%.%",
        "%.%%%%.%%%%%.%%.%%%%%.%%%%.%",
        "%.%%%%.%%%%%.%%.%%%%%.%%%%.%",
        "%..........................%",
        "%.%%%%.%%.%%%%%%%%.%%.%%%%.%",
        "%.%%%%.%%.%%%%%%%%.%%.%%%%.%",
        "%......%%....%%....%%......%",
        "%%%%%%.%%%%%-%%-%%%%%.%%%%%%",
        "-----%.%%%%%-%%-%%%%%.%-----",
        "-----%.%%----------%%.%-----",
        "-----%.%%-%%%==%%%-%%.%-----",
        "%%%%%%.%%-%G----G%-%%.%%%%%%",
        "------.---%------%---.------",
        "%%%%%%.%%-%G----G%-%%.%%%%%%",
        "-----%.%%-%%%%%%%%-%%.%-----",
        "-----%.%%----------%%.%-----",
        "-----%.%%-%%%%%%%%-%%.%-----",
        "%%%%%%.%%-%%%%%%%%-%%.%%%%%%",
        "%............%%............%",
        "%.%%%%.%%%%%.%%.%%%%%.%%%%.%",
        "%.%%%%.%%%%%.%%.%%%%%.%%%%.%",
        "%...%%.......--.......%%...%",
        "%%%.%%.%%.%%%%%%%%.%%.%%.%%%",
        "%%%.%%.%%.%%%%%%%%.%%.%%.%%%",
        "%......%%....%%....%%......%",
        "%.%%%%%%%%%%.%%.%%%%%%%%%%.%",
        "%.%%%%%%%%%%.%%.%%%%%%%%%%.%",
        "%..........................%",
        "%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
    ]

    def __init__(self):
        super().__init__()

        file_path = os.path.dirname(os.path.abspath(__file__))
        os.chdir(file_path)

        # Sprite lists
        self.brick_list = arcade.SpriteList()
        self.food_list = arcade.SpriteList()

        self.setup()
        self.draw_map()

    def draw_map(self):
        global mapHeight
        arcade.start_render()

        y = mapHeight

        for row in map:
            x = 0
            for element in row:

                if element == "." or element == "o" or element == "-" or element == "G":
                    arcade.draw_lrtb_rectangle_filled(x, x + 20, y - 15, y - 35, arcade.color.BLACK)

                elif element == "=":
                    arcade.draw_lrtb_rectangle_filled(x, x + 20, y - 15, y - 35, arcade.color.WHITE)

                x += 20
            y -= 20

    def setup(self):
        global mapHeight

        y = mapHeight

        for row in map:
            x = 0
            for element in row:
                if element == "%":
                    brick = arcade.Sprite(scale = 0.5)
                    brick.append_texture()      #choose image
                    brick.center_x = x + 10
                    brick.center_y = y - 10

                    self.brick_list.append(brick)

                elif element == ".":
                    food = arcade.Sprite(scale = 0.5)
                    food.append_texture()       #choose image
                    food.center_x = x + 10
                    food.center_y = y - 10

                    self.food_list.append(self, food)

                x += 20
            y -= 20


class Player(arcade.Window):

    def __init__(self):
        super().__init__()

        self.player = arcade.Sprite()
        self.setup()
        self.draw()

    def setup(self):
        self.score = 0
        character_scale = 1
        self.player.stand_right_textures.append(arcade.load_texture("images/pacman.png", scale = character_scale))

    def draw(self):
        pass

    def move(self, direction, movement):

        if movement == MOVEMENT_SPEED:
            if direction == "y":
                self.player.change_y = MOVEMENT_SPEED
            else:
                self.player.change_x = MOVEMENT_SPEED
        elif movement == -MOVEMENT_SPEED:
            if direction == "y":
                self.player.change_y = -MOVEMENT_SPEED
            else:
                self.player.change_x = -MOVEMENT_SPEED

class MyGame(arcade.Window):
    player = Player()
    map = Map()

    def setup(self):
        arcade.set_background_color(arcade.color.BLUE)
        arcade.schedule(self.update, 1 / 60)

        #map = Map()
        #player = Player()

        """
        arcade.schedule(update, 1 / 60)

        # Override arcade window methods
        window = arcade.get_window()
        window.on_draw = on_draw
        window.on_key_press = on_key_press
        window.on_key_release = on_key_release
        
        arcade.run()
        """

    def update(delta_time):
        global map
        map.food_list.update()
        # Generate a list of all sprites that collided with the player.
        hit_list = arcade.check_for_collision_with_list(player, map.food_list)

        # Loop through each colliding sprite, remove it, and add to the score.
        for food in hit_list:
            food.kill() #is this how to remove food sprite
            player.score += 1

    def on_draw(self):
        global player, map
        player.draw()
        map.draw_map()

    def on_key_press(self, key, modifiers):
        if key == arcade.key.UP:
            player.move(self, "y", MOVEMENT_SPEED) #refer to the player in setup

        elif key == arcade.key.DOWN:
            player.move(self, "y", -MOVEMENT_SPEED)  # refer to the player in setup

        elif key == arcade.key.LEFT:
            player.move(self, "x", -MOVEMENT_SPEED)  # refer to the player in setup

        elif key == arcade.key.RIGHT:
            player.move(self, "x", MOVEMENT_SPEED)  # refer to the player in setup

        elif key == arcade.key.ENTER:
            pass

def main():
    window = MyGame(WIDTH, HEIGHT, TITLE)
    window.setup()
    arcade.run()

if __name__ == '__main__':
    main()
